# Parallel Programming Course Documentation
# Copyright (C) 2025, Learning Process
# This file is distributed under the same license as the Parallel
# Programming Course package.
# Learning Process Team <gooddoog@student.su,
# nesterov.alexander@outlook.com>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Parallel Programming Course \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-24 18:02+0200\n"
"PO-Revision-Date: 2025-07-27 18:21+0200\n"
"Last-Translator: Learning Process Team <gooddoog@student.su>\n"
"Language: en\n"
"Language-Team: Learning Process Team (gooddoog@student.su, "
"nesterov.alexander@outlook.com)\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../../../docs/user_guide/ci.rst:2
msgid "Continuous Integration (CI)"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:5
msgid "Overview"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:6
msgid ""
"Your pull request must pass all required CI checks before review/merge. "
"The pipeline validates formatting and static analysis, builds on all "
"platforms, runs functional tests (threads and MPI), measures performance,"
" builds docs, and publishes artifacts (coverage report, docs, "
"scoreboard)."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:9
msgid "High‑level pipeline"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:11
msgid ""
"Pre-commit checks (fast) — runs repository hooks on changed files; fix "
"locally via ``pre-commit run -a``."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:13
msgid ""
"Platform builds and tests (Ubuntu, macOS, Windows) — Ubuntu (GCC/Clang, "
"amd64+arm), macOS (Clang), Windows (MSVC/Clang‑CL); functional tests via "
"``scripts/run_tests.py`` for threads (``--counts 1 2 3 4``; extended ``5 "
"7 11 13``) and processes (MPI, ``--counts 1 2 3 4``)."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:15
msgid ""
"Sanitizers (Ubuntu/Clang) — Address/UB/Leak; tests use ``PPC_ASAN_RUN=1``"
" to skip valgrind."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:17
msgid ""
"Coverage (Ubuntu/GCC) — ``-D USE_COVERAGE=ON`` + gcovr; publishes to "
"Codecov and uploads ``cov-report`` (HTML)."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:19
msgid ""
"Performance (perf) — ``scripts/generate_perf_results.sh`` produces "
"``build/perf_stat_dir``; uploads ``perf-stat`` (Linux) and ``perf-stat-"
"macos`` (macOS)."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:21
msgid ""
"Pages (docs and scoreboard) — builds Doxygen XML and Sphinx (EN+RU) + "
"scoreboard; on ``master`` deploys with coverage to GitHub Pages."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:23
msgid ""
"Security and static analysis — clang‑tidy on PRs (avoid ``NOLINT``/``IWYU"
" pragma``), scheduled CodeQL (C++/Python) and OpenSSF Scorecard."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:26
msgid "Diagram"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:27
msgid "The pipeline is illustrated below (blocks may be collapsed in GitHub UI):"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:29
msgid "CI pipeline (pre-commit → OS builds/tests → perf → pages)"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:34
msgid "Running tests locally"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:36
msgid "Use the ``scripts/run_tests.py`` helper. Common environment variables:"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:38
msgid "``PPC_NUM_THREADS``"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:39
msgid "Number of threads (also exported as ``OMP_NUM_THREADS``)."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:41
msgid "``PPC_NUM_PROC``"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:42
msgid "Number of MPI processes to launch."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:44
msgid "``PPC_ASAN_RUN``"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:45
msgid ""
"Set to ``1`` when sanitizers are enabled to skip ``valgrind`` runs "
"(default ``0``)."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:47
msgid "``PPC_IGNORE_TEST_TIME_LIMIT``"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:48
msgid "Set to ``1`` to disable test time limits (default ``0``)."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:50
msgid ""
"Execution modes: - ``--running-type=threads`` — shared-memory backends "
"(OpenMP/TBB/std::thread) - ``--running-type=processes`` — MPI tests - "
"``--running-type=performance`` — performance benchmarks (mirrors CI perf "
"job)"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:55
msgid "Examples:"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:71
msgid ""
"Options: - ``--counts`` runs tests for multiple thread/process counts "
"sequentially. - ``--additional-mpi-args`` passes extra launcher flags "
"(e.g., ``--oversubscribe``). - ``--verbose`` prints every executed "
"command."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:77
msgid "Coverage and sanitizers locally"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:78
msgid ""
"Sanitizers (Linux): configure with ``-D ENABLE_ADDRESS_SANITIZER=ON`` "
"(and optional UB/Leak), run tests with ``PPC_ASAN_RUN=1``."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:79
msgid ""
"Coverage (Linux/GCC): configure with ``-D USE_COVERAGE=ON``, run tests, "
"then generate HTML via ``gcovr`` (see CI ``gcc-build-codecov`` for "
"command line)."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:82
msgid "Docs and scoreboard artifacts"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:83
msgid ""
"Docs: run Doxygen first (``doxygen Doxyfile``), then Sphinx EN/RU via "
"CMake targets ``docs_gettext``, ``docs_update``, ``docs_html``."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:84
msgid ""
"Scoreboard: generate perf stats (``scripts/generate_perf_results.sh``) "
"and build scoreboard target or use ``python3 scoreboard/main.py`` "
"locally."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:87
msgid "Troubleshooting"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:88
msgid ""
"Pre-commit fails: run ``pre-commit run -a`` locally (install with ``pre-"
"commit install``) and commit fixes."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:89
msgid ""
"Static analysis (clang-tidy) fails: address comments; do not use "
"``NOLINT``/``IWYU pragma`` in task code."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:90
msgid ""
"Tests not found/not running: verify ``settings.json`` enables required "
"technologies and tests exist; see :doc:`submit_work`."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:91
msgid ""
"Time limits exceeded: reduce data sizes; prefer env vars "
"(:doc:`environment_variables`) like "
"``PPC_TASK_MAX_TIME``/``PPC_PERF_MAX_TIME``; avoid sleeps/randomness."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:92
msgid ""
"MPI runs fail locally: set ``PPC_NUM_PROC`` and try ``--additional-mpi-"
"args=\\\"--oversubscribe\\\"``."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:93
msgid ""
"Docs build fails: fix RST warnings; run ``doxygen Doxyfile`` before "
"Sphinx targets."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:94
msgid ""
"Performance job fails: ensure exactly two perf tests (``task`` and "
"``pipeline``) and keep durations within limits."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:97
msgid "Local clang-tidy and gcovr examples"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:99
msgid "clang-tidy (static analysis):"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:113
msgid "gcovr (coverage, GCC):"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:141
msgid "Tooling tips (versions and install)"
msgstr ""

#: ../../../../docs/user_guide/ci.rst:143
msgid ""
"clang-tidy version - CI uses clang-tidy 21. Prefer the same locally to "
"avoid mismatches. - The helper may be named ``clang-tidy-21`` or ``run-"
"clang-tidy-21`` on some systems."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:147
msgid ""
"Linux - clang-tidy: install from your distro (e.g., ``apt install clang-"
"tidy-21``) or use the course Docker image. - gcovr: ``python3 -m pip "
"install gcovr`` or a distro package. - GCC version: use ``gcov-14`` when "
"building with GCC 14 (as in CI)."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:152
msgid ""
"macOS - clang-tidy: ``brew install llvm``; binary at ``$(brew "
"--prefix)/opt/llvm/bin/clang-tidy``. - Optionally add LLVM to PATH or "
"invoke with full path. - gcovr: ``python3 -m pip install gcovr`` or "
"``brew install gcovr``."
msgstr ""

#: ../../../../docs/user_guide/ci.rst:157
msgid ""
"Windows - clang-tidy: install LLVM (Clang) or use ``choco install llvm``;"
" ensure ``clang-tidy.exe`` is in PATH. - gcovr: ``py -m pip install "
"gcovr``. - Coverage is primarily supported in our CI on Linux/GCC; prefer"
" generating reports on Linux."
msgstr ""

#~ msgid ""
#~ "Students need to pass all the "
#~ "checks in the CI pipeline before "
#~ "their work can be considered for "
#~ "submission. This includes successful code "
#~ "checkout, build ans testing stages. Each"
#~ " integration is verified by an "
#~ "automated build and automated tests."
#~ msgstr ""

#~ msgid "CI Pipeline"
#~ msgstr ""

#~ msgid ""
#~ "The CI pipeline for this project "
#~ "is illustrated in the following diagram:"
#~ msgstr ""

#~ msgid "CI Pipeline Diagram"
#~ msgstr ""

#~ msgid "Running ``scripts/run_tests.py``"
#~ msgstr ""

#~ msgid ""
#~ "Automated tests are executed through the"
#~ " ``scripts/run_tests.py`` helper.  The script "
#~ "requires several environment variables to "
#~ "be defined:"
#~ msgstr ""

#~ msgid ""
#~ "Number of threads to use.  The "
#~ "value is also exported as "
#~ "``OMP_NUM_THREADS``."
#~ msgstr ""

#~ msgid ""
#~ "Set to ``1`` when sanitizers are "
#~ "enabled to skip ``valgrind`` runs "
#~ "(optional, default ``0``)."
#~ msgstr ""

#~ msgid "Set to ``1`` to disable test time limits (optional, default ``0``)."
#~ msgstr ""

#~ msgid ""
#~ "The execution mode is selected with "
#~ "``--running-type``.  The most common "
#~ "modes are ``threads`` for shared-memory"
#~ " backends and ``processes`` for MPI "
#~ "based tests.  ``performance`` mode runs "
#~ "performance benchmarks."
#~ msgstr ""

#~ msgid ""
#~ "Note: In ``threads`` and ``processes`` "
#~ "modes the runner also executes core "
#~ "library tests (``core_func_tests``) before the"
#~ " task tests."
#~ msgstr ""

#~ msgid "Example usage:"
#~ msgstr ""

#~ msgid ""
#~ "Additional MPI arguments can be supplied"
#~ " with ``--additional-mpi-args`` when "
#~ "running in ``processes`` mode."
#~ msgstr ""

#~ msgid ""
#~ "The ``--counts`` option allows sequential "
#~ "execution of tests with several "
#~ "thread/process counts.  When specified, the"
#~ " script will iterate over the "
#~ "provided values, updating ``PPC_NUM_THREADS`` "
#~ "or ``PPC_NUM_PROC`` accordingly before each"
#~ " run."
#~ msgstr ""

#~ msgid ""
#~ "Use ``--verbose`` to print every command"
#~ " executed by ``run_tests.py``.  This can"
#~ " be helpful for debugging CI failures"
#~ " or verifying the exact arguments "
#~ "passed to the test binaries."
#~ msgstr ""

