message(STATUS "Student's tasks")

if (USE_MPI)
    list(APPEND LIST_OF_TASKS "mpi")
else ()
    message(WARNING "MPI tasks not build!")
endif ()

if (USE_OMP)
    list(APPEND LIST_OF_TASKS "omp")
else ()
    message(WARNING "OpenMP tasks not build!")
endif ()

if (USE_SEQ)
    list(APPEND LIST_OF_TASKS "seq")
else ()
    message(WARNING "Sequential tasks not build!")
endif ()

if (USE_STL)
    list(APPEND LIST_OF_TASKS "stl")
else ()
    message(WARNING "STL tasks not build!")
endif ()

if (USE_TBB)
    list(APPEND LIST_OF_TASKS "tbb")
else ()
    message(WARNING "TBB tasks not build!")
endif ()

if (USE_MPI AND USE_OMP AND USE_SEQ AND USE_STL AND USE_TBB)
    list(APPEND LIST_OF_TASKS "all")
else ()
    message(WARNING "ALL tasks not build!")
endif ()

add_compile_definitions(PATH_TO_PPC_PROJECT="${CMAKE_SOURCE_DIR}")

foreach(TASK_TYPE ${LIST_OF_TASKS})
    set(PATH_TO_TASK "${CMAKE_CURRENT_SOURCE_DIR}/${TASK_TYPE}")
    get_filename_component(MODULE_NAME ${PATH_TO_TASK} NAME)
    message(STATUS      "${MODULE_NAME} tasks")
    set(exec_func_tests "${MODULE_NAME}_func_tests")
    set(exec_perf_tests "${MODULE_NAME}_perf_tests")
    set(exec_func_lib   "${MODULE_NAME}_module_lib")
    set(project_suffix  "_${MODULE_NAME}")

    SUBDIRLIST(subdirs ${PATH_TO_TASK})
    foreach(subd ${subdirs})
      if ("${subd}" MATCHES "_disabled$")
        get_filename_component(DIR_NAME ${PATH_TO_TASK} NAME)
        list(APPEND LIST_OF_REVERTS "${DIR_NAME}_${subd}")
        continue()
      endif()
      get_filename_component(PROJECT_ID ${subd} NAME)
      set(PATH_PREFIX "${PATH_TO_TASK}/${subd}")
      message(STATUS "-- ${PROJECT_ID}${project_suffix}")

      file(GLOB_RECURSE TMP_LIB_SOURCE_FILES "${PATH_PREFIX}/include/*" "${PATH_PREFIX}/src/*")
      list(APPEND LIB_SOURCE_FILES ${TMP_LIB_SOURCE_FILES})

      file(GLOB SRC_RES "${PATH_PREFIX}/src/*")
      list(APPEND SRC_RES ${TMP_SRC_RES})

      file(GLOB_RECURSE TMP_FUNC_TESTS_SOURCE_FILES "${PATH_PREFIX}/func_tests/*")
      list(APPEND FUNC_TESTS_SOURCE_FILES ${TMP_FUNC_TESTS_SOURCE_FILES})

      file(GLOB_RECURSE TMP_PERF_TESTS_SOURCE_FILES "${PATH_PREFIX}/perf_tests/*")
      list(APPEND PERF_TESTS_SOURCE_FILES ${TMP_PERF_TESTS_SOURCE_FILES})
    endforeach()

    project(${exec_func_lib})
    list(LENGTH SRC_RES RES_LEN)
    if(RES_LEN EQUAL 0)
      add_library(${exec_func_lib} INTERFACE ${LIB_SOURCE_FILES})
    else()
      add_library(${exec_func_lib} STATIC ${LIB_SOURCE_FILES})
    endif()
    set_target_properties(${exec_func_lib} PROPERTIES LINKER_LANGUAGE CXX)

    if (USE_FUNC_TESTS)
      add_executable(${exec_func_tests} ${FUNC_TESTS_SOURCE_FILES} "${PATH_TO_TASK}/runner.cpp")
      list(APPEND LIST_OF_EXEC_TESTS ${exec_func_tests})
    endif (USE_FUNC_TESTS)
    if (USE_PERF_TESTS)
      add_executable(${exec_perf_tests} ${PERF_TESTS_SOURCE_FILES} "${PATH_TO_TASK}/runner.cpp")
      list(APPEND LIST_OF_EXEC_TESTS ${exec_perf_tests})
    endif (USE_PERF_TESTS)

    foreach (EXEC_FUNC ${LIST_OF_EXEC_TESTS})
      target_link_libraries(${EXEC_FUNC} PUBLIC ${exec_func_lib} core_module_lib)

      if ("${MODULE_NAME}" STREQUAL "stl")
          target_link_libraries(${EXEC_FUNC} PUBLIC Threads::Threads)
      elseif ("${MODULE_NAME}" STREQUAL "omp")
          target_link_libraries(${EXEC_FUNC} PUBLIC ${OpenMP_libomp_LIBRARY})
      elseif ("${MODULE_NAME}" STREQUAL "mpi")
          if( MPI_COMPILE_FLAGS )
              set_target_properties(${EXEC_FUNC} PROPERTIES COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
          endif( MPI_COMPILE_FLAGS )

          if( MPI_LINK_FLAGS )
              set_target_properties(${EXEC_FUNC} PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
          endif( MPI_LINK_FLAGS )
          target_link_libraries(${EXEC_FUNC} PUBLIC ${MPI_LIBRARIES})

          add_dependencies(${EXEC_FUNC} ppc_boost)
          target_link_directories(${EXEC_FUNC} PUBLIC ${CMAKE_BINARY_DIR}/ppc_boost/install/lib)
          if (NOT MSVC)
              target_link_libraries(${EXEC_FUNC} PUBLIC boost_mpi boost_serialization)
          endif ()
      elseif ("${MODULE_NAME}" STREQUAL "tbb")
          add_dependencies(${EXEC_FUNC} ppc_onetbb)
          target_link_directories(${EXEC_FUNC} PUBLIC ${CMAKE_BINARY_DIR}/ppc_onetbb/install/lib)
          if(NOT MSVC)
              target_link_libraries(${EXEC_FUNC} PUBLIC tbb)
          endif()
      elseif ("${MODULE_NAME}" STREQUAL "all")
          target_link_libraries(${EXEC_FUNC} PUBLIC Threads::Threads)
          target_link_libraries(${EXEC_FUNC} PUBLIC ${OpenMP_libomp_LIBRARY})
          if( MPI_COMPILE_FLAGS )
              set_target_properties(${EXEC_FUNC} PROPERTIES COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
          endif( MPI_COMPILE_FLAGS )

          if( MPI_LINK_FLAGS )
              set_target_properties(${EXEC_FUNC} PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
          endif( MPI_LINK_FLAGS )
          target_link_libraries(${EXEC_FUNC} PUBLIC ${MPI_LIBRARIES})

          add_dependencies(${EXEC_FUNC} ppc_boost)
          target_link_directories(${EXEC_FUNC} PUBLIC ${CMAKE_BINARY_DIR}/ppc_boost/install/lib)
          if (NOT MSVC)
              target_link_libraries(${EXEC_FUNC} PUBLIC boost_mpi boost_serialization)
          endif ()

          add_dependencies(${EXEC_FUNC} ppc_onetbb)
          target_link_directories(${EXEC_FUNC} PUBLIC ${CMAKE_BINARY_DIR}/ppc_onetbb/install/lib)
          if(NOT MSVC)
              target_link_libraries(${EXEC_FUNC} PUBLIC tbb)
          endif()
      endif ()

      add_dependencies(${EXEC_FUNC} ppc_opencv)
      if(WIN32)
          target_include_directories(${EXEC_FUNC} PUBLIC "${CMAKE_BINARY_DIR}/ppc_opencv/install/include")
      else()
          target_include_directories(${EXEC_FUNC} PUBLIC "${CMAKE_BINARY_DIR}/ppc_opencv/install/include/opencv4")
      endif()


      if(WIN32)
          target_link_directories(${EXEC_FUNC} PUBLIC "${CMAKE_BINARY_DIR}/ppc_opencv/build/lib")
          set(OCV_VERSION "4110")
      else()
          target_link_directories(${EXEC_FUNC} PUBLIC "${CMAKE_BINARY_DIR}/ppc_opencv/install/lib")
      endif()

      target_link_libraries(${EXEC_FUNC} PUBLIC
              opencv_core${OCV_VERSION}
              opencv_highgui${OCV_VERSION}
              opencv_imgcodecs${OCV_VERSION}
              opencv_imgproc${OCV_VERSION}
              opencv_videoio${OCV_VERSION})

      add_dependencies(${EXEC_FUNC} ppc_googletest)
      target_link_directories(${EXEC_FUNC} PUBLIC "${CMAKE_BINARY_DIR}/ppc_googletest/install/lib")
      target_link_libraries(${EXEC_FUNC} PUBLIC gtest gtest_main)
      enable_testing()
      add_test(NAME ${EXEC_FUNC} COMMAND ${EXEC_FUNC})

      # Install the executable
      install(TARGETS ${EXEC_FUNC} RUNTIME DESTINATION bin)
    endforeach ()

    # Install the library
    install(TARGETS ${exec_func_lib} ARCHIVE DESTINATION lib LIBRARY DESTINATION lib)

    set(LIST_OF_EXEC_TESTS "")
    set(LIB_SOURCE_FILES "")
    set(SRC_RES "")
    set(FUNC_TESTS_SOURCE_FILES "")
    set(PERF_TESTS_SOURCE_FILES "")
endforeach()

set(OUTPUT_FILE "${CMAKE_BINARY_DIR}/revert-list.txt")
file(WRITE ${OUTPUT_FILE} "${CONTENT}")
message(STATUS "revert list")
foreach (dir_name ${LIST_OF_REVERTS})
    message(STATUS "-- ${dir_name}")
    file(APPEND ${OUTPUT_FILE} "${dir_name}\n")
endforeach()
