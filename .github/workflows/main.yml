name: Build application

on: [push, pull_request]

jobs:
  ubuntu-gcc-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Setup environment
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install g++-9
        sudo apt-get install cppcheck ninja-build
        sudo apt-get install mpich libmpich* mpi* openmpi-bin
        sudo apt-get install libomp-dev
        sudo apt-get install python3-pip
        sudo python3 -m pip install --upgrade pip
        sudo python3 -m pip install setuptools cpplint
        sudo apt-get install valgrind
    - name: Update submodules
      run: git submodule update --init --recursive
    - name: CMake configure
      run: |
        mkdir build
        cd build
        cmake -G Ninja -D USE_SEQ=ON -D USE_MPI=ON -D USE_OMP=ON -D USE_TBB=ON -D USE_STD=ON -D CMAKE_BUILD_TYPE=RELEASE ..
        cd ..
      env:
        CC: gcc-9
        CXX: g++-9
    - name: Ninja build
      run: |
        cd build
        ninja
        cd ..
      env:
        CC: gcc-9
        CXX: g++-9
    - name: Run tests
      run: |
        export OMP_NUM_THREADS=4
        source scripts/run.sh
  ubuntu-clang-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Setup environment
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install clang*
        sudo apt-get install cppcheck ninja-build
        sudo apt-get install mpich libmpich* mpi* openmpi-bin
        sudo apt-get install libomp-dev
        sudo apt-get install python3-pip
        sudo python3 -m pip install --upgrade pip
        sudo python3 -m pip install setuptools cpplint
        sudo apt-get install valgrind
    - name: Update submodules
      run: git submodule update --init --recursive
    - name: CMake configure
      run: |
        mkdir build
        cd build
        cmake -G Ninja -D USE_SEQ=ON -D USE_MPI=ON -D USE_OMP=ON -D USE_TBB=ON -D USE_STD=ON -D CMAKE_BUILD_TYPE=RELEASE ..
        cd ..
      env:
        CC: clang
        CXX: clang++
    - name: Ninja build
      run: |
        cd build
        ninja
        cd ..
      env:
        CC: clang
        CXX: clang++
    - name: Run tests
      run: |
        export OMP_NUM_THREADS=4
        source scripts/run.sh
  macos-clang-build:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v1
    - name: Setup environment
      run: |
        rm '/usr/local/bin/2to3' '/usr/local/bin/2to3-3.11' '/usr/local/bin/idle3.11' '/usr/local/bin/idle3'
        rm '/usr/local/bin/pydoc3.11' '/usr/local/bin/pydoc3' '/usr/local/bin/python3.11' '/usr/local/bin/python3'
        rm '/usr/local/bin/python3.11-config' '/usr/local/bin/python3-config'
        brew update-reset
        brew install cppcheck ninja 
        brew install openssl
        brew link --force openssl
        brew install mpich llvm libomp
        brew link --overwrite python@3.10
        /usr/local/bin/python3.10 -m pip install --upgrade pip
        /usr/local/bin/python3.10 -m pip install setuptools cpplint
    - name: Update submodules
      run: git submodule update --init --recursive
    - name: CMake configure
      run: |
        export LDFLAGS="$LDFLAGS -L/usr/local/opt/openssl/lib"
        export CFLAGS="$CFLAGS -I/usr/local/opt/openssl/include"
        export CXXFLAGS="$CXXFLAGS -I/usr/local/opt/openssl/include"
        export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/openssl/include"
        export PATH="/usr/local/opt/openssl/bin:$PATH"
        export PKG_CONFIG_PATH="/usr/local/opt/openssl/lib/pkgconfig"
        mkdir build
        cd build
        cmake -G Ninja -D USE_SEQ=ON -D USE_MPI=ON -D USE_OMP=ON -D USE_TBB=ON -D USE_STD=ON -D CMAKE_BUILD_TYPE=RELEASE \
             -DOpenMP_CXX_FLAGS="-Xclang -fopenmp -I/usr/local/opt/libomp/include" \
             -DOpenMP_C_FLAGS="-Xclang -fopenmp -I/usr/local/opt/libomp/include" \
             -DOpenMP_CXX_FLAGS="-Xclang -fopenmp -I/usr/local/opt/libomp/include" \
             -DOpenMP_C_FLAGS="-Xclang -fopenmp -I/usr/local/opt/libomp/include" \
             -DOpenMP_CXX_LIB_NAMES=libomp  -DOpenMP_C_LIB_NAMES=libomp  \
             -DOpenMP_libomp_LIBRARY=/usr/local/opt/libomp/lib/libomp.dylib  \
             -DCMAKE_SHARED_LINKER_FLAGS="-L/usr/local/opt/libomp/lib -lomp -Wl,-rpath,/usr/local/opt/libomp/lib" ..
    - name: Ninja build
      run: |
        export LDFLAGS="$LDFLAGS -L/usr/local/opt/openssl/lib"
        export CFLAGS="$CFLAGS -I/usr/local/opt/openssl/include"
        export CXXFLAGS="$CXXFLAGS -I/usr/local/opt/openssl/include"
        export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/openssl/include"
        export PATH="/usr/local/opt/openssl/bin:$PATH"
        export PKG_CONFIG_PATH="/usr/local/opt/openssl/lib/pkgconfig"
        cd build
        ninja
        cd ..
    - name: Run tests
      run: |
        export OMP_NUM_THREADS=4
        source scripts/run_mac.sh
#  windows-msvc-build:
#    runs-on: windows-latest
#    steps:
#    - uses: actions/checkout@v1
#    - name: Download dependencies
#      run: |
#        Invoke-WebRequest https://github.com/microsoft/Microsoft-MPI/releases/download/v10.1.1/msmpisetup.exe -OutFile msmpisetup.exe
#        Invoke-WebRequest https://github.com/microsoft/Microsoft-MPI/releases/download/v10.1.1/msmpisdk.msi -OutFile msmpisdk.msi
#    - name: Install MPI
#      run: |
#        MSMpiSetup.exe -unattend
#        set PATH=C:\Program Files\Microsoft MPI\Bin;%PATH%
#        msmpisdk.msi /passive
#      shell: cmd
#    - name: Update submodules
#      run: git submodule update --init --recursive
#    - name: Build
#      run: |
#        set PATH=C:\Program Files\Microsoft MPI\Bin;%PATH%
#        mkdir build
#        cd build && cmake -D USE_SEQ=ON -D USE_MPI=ON -D USE_OMP=ON -D USE_TBB=ON -D USE_STD=ON -D MPI_C_INCLUDE_PATH:PATH="%MPI_HOME%/Include" -D MPI_C_LIBRARIES:PATH="%MPI_HOME%/Lib/x86/msmpi.lib" -D MPI_CXX_INCLUDE_PATH:PATH="%MPI_HOME%/Include" -D MPI_CXX_LIBRARIES:PATH="%MPI_HOME%/Lib/x86/msmpi.lib" .. -A Win32
#        cmake --build .
#      env:
#        MPI_HOME: C:/Program Files (x86)/Microsoft SDKs/MPI
#      shell: cmd
#    - name: Run tests
#      run: |
#        set OMP_NUM_THREADS=4
#        scripts/run.bat
